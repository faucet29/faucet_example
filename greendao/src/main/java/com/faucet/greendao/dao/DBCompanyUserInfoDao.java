package com.faucet.greendao.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.faucet.greendao.bean.DBCompanyUserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBCOMPANY_USER_INFO".
*/
public class DBCompanyUserInfoDao extends AbstractDao<DBCompanyUserInfo, Long> {

    public static final String TABLENAME = "DBCOMPANY_USER_INFO";

    /**
     * Properties of entity DBCompanyUserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid = new Property(0, Long.class, "uid", true, "UID");
        public final static Property Company_id = new Property(1, Long.class, "company_id", false, "COMPANY_ID");
        public final static Property Account_uid = new Property(2, Long.class, "account_uid", false, "ACCOUNT_UID");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Homeplace_province = new Property(4, String.class, "homeplace_province", false, "HOMEPLACE_PROVINCE");
        public final static Property Homeplace_city = new Property(5, String.class, "homeplace_city", false, "HOMEPLACE_CITY");
        public final static Property Homeplace_county = new Property(6, String.class, "homeplace_county", false, "HOMEPLACE_COUNTY");
        public final static Property Salary = new Property(7, Long.class, "salary", false, "SALARY");
        public final static Property Hire_date = new Property(8, String.class, "hire_date", false, "HIRE_DATE");
        public final static Property Fire_date = new Property(9, String.class, "fire_date", false, "FIRE_DATE");
        public final static Property Fire_reason = new Property(10, String.class, "fire_reason", false, "FIRE_REASON");
        public final static Property Probation_end_time = new Property(11, String.class, "probation_end_time", false, "PROBATION_END_TIME");
        public final static Property Max = new Property(12, String.class, "max", false, "MAX");
        public final static Property Guide_step = new Property(13, String.class, "guide_step", false, "GUIDE_STEP");
        public final static Property Push_info = new Property(14, String.class, "push_info", false, "PUSH_INFO");
        public final static Property Description = new Property(15, String.class, "description", false, "DESCRIPTION");
        public final static Property Last_device_id = new Property(16, String.class, "last_device_id", false, "LAST_DEVICE_ID");
        public final static Property Org_version = new Property(17, String.class, "org_version", false, "ORG_VERSION");
        public final static Property Source = new Property(18, String.class, "source", false, "SOURCE");
        public final static Property Induction_nums = new Property(19, String.class, "induction_nums", false, "INDUCTION_NUMS");
        public final static Property Untreated_type = new Property(20, String.class, "untreated_type", false, "UNTREATED_TYPE");
        public final static Property Position = new Property(21, Long.class, "position", false, "POSITION");
        public final static Property Boss_type = new Property(22, Integer.class, "boss_type", false, "BOSS_TYPE");
        public final static Property Is_admin = new Property(23, Integer.class, "is_admin", false, "IS_ADMIN");
        public final static Property Is_leader = new Property(24, Integer.class, "is_leader", false, "IS_LEADER");
        public final static Property Is_manager = new Property(25, Integer.class, "is_manager", false, "IS_MANAGER");
        public final static Property Dimission_step = new Property(26, Integer.class, "dimission_step", false, "DIMISSION_STEP");
        public final static Property Is_delete = new Property(27, Integer.class, "is_delete", false, "IS_DELETE");
        public final static Property Update_time = new Property(28, Long.class, "update_time", false, "UPDATE_TIME");
        public final static Property Insert_time = new Property(29, Long.class, "insert_time", false, "INSERT_TIME");
        public final static Property Delete_time = new Property(30, Long.class, "delete_time", false, "DELETE_TIME");
    }

    private DaoSession daoSession;

    private Query<DBCompanyUserInfo> dBUserInfo_CompanyUserQuery;

    public DBCompanyUserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DBCompanyUserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBCOMPANY_USER_INFO\" (" + //
                "\"UID\" INTEGER PRIMARY KEY ," + // 0: uid
                "\"COMPANY_ID\" INTEGER," + // 1: company_id
                "\"ACCOUNT_UID\" INTEGER," + // 2: account_uid
                "\"TITLE\" TEXT," + // 3: title
                "\"HOMEPLACE_PROVINCE\" TEXT," + // 4: homeplace_province
                "\"HOMEPLACE_CITY\" TEXT," + // 5: homeplace_city
                "\"HOMEPLACE_COUNTY\" TEXT," + // 6: homeplace_county
                "\"SALARY\" INTEGER," + // 7: salary
                "\"HIRE_DATE\" TEXT," + // 8: hire_date
                "\"FIRE_DATE\" TEXT," + // 9: fire_date
                "\"FIRE_REASON\" TEXT," + // 10: fire_reason
                "\"PROBATION_END_TIME\" TEXT," + // 11: probation_end_time
                "\"MAX\" TEXT," + // 12: max
                "\"GUIDE_STEP\" TEXT," + // 13: guide_step
                "\"PUSH_INFO\" TEXT," + // 14: push_info
                "\"DESCRIPTION\" TEXT," + // 15: description
                "\"LAST_DEVICE_ID\" TEXT," + // 16: last_device_id
                "\"ORG_VERSION\" TEXT," + // 17: org_version
                "\"SOURCE\" TEXT," + // 18: source
                "\"INDUCTION_NUMS\" TEXT," + // 19: induction_nums
                "\"UNTREATED_TYPE\" TEXT," + // 20: untreated_type
                "\"POSITION\" INTEGER," + // 21: position
                "\"BOSS_TYPE\" INTEGER," + // 22: boss_type
                "\"IS_ADMIN\" INTEGER," + // 23: is_admin
                "\"IS_LEADER\" INTEGER," + // 24: is_leader
                "\"IS_MANAGER\" INTEGER," + // 25: is_manager
                "\"DIMISSION_STEP\" INTEGER," + // 26: dimission_step
                "\"IS_DELETE\" INTEGER," + // 27: is_delete
                "\"UPDATE_TIME\" INTEGER," + // 28: update_time
                "\"INSERT_TIME\" INTEGER," + // 29: insert_time
                "\"DELETE_TIME\" INTEGER);"); // 30: delete_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBCOMPANY_USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBCompanyUserInfo entity) {
        stmt.clearBindings();
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(1, uid);
        }
 
        Long company_id = entity.getCompany_id();
        if (company_id != null) {
            stmt.bindLong(2, company_id);
        }
 
        Long account_uid = entity.getAccount_uid();
        if (account_uid != null) {
            stmt.bindLong(3, account_uid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String homeplace_province = entity.getHomeplace_province();
        if (homeplace_province != null) {
            stmt.bindString(5, homeplace_province);
        }
 
        String homeplace_city = entity.getHomeplace_city();
        if (homeplace_city != null) {
            stmt.bindString(6, homeplace_city);
        }
 
        String homeplace_county = entity.getHomeplace_county();
        if (homeplace_county != null) {
            stmt.bindString(7, homeplace_county);
        }
 
        Long salary = entity.getSalary();
        if (salary != null) {
            stmt.bindLong(8, salary);
        }
 
        String hire_date = entity.getHire_date();
        if (hire_date != null) {
            stmt.bindString(9, hire_date);
        }
 
        String fire_date = entity.getFire_date();
        if (fire_date != null) {
            stmt.bindString(10, fire_date);
        }
 
        String fire_reason = entity.getFire_reason();
        if (fire_reason != null) {
            stmt.bindString(11, fire_reason);
        }
 
        String probation_end_time = entity.getProbation_end_time();
        if (probation_end_time != null) {
            stmt.bindString(12, probation_end_time);
        }
 
        String max = entity.getMax();
        if (max != null) {
            stmt.bindString(13, max);
        }
 
        String guide_step = entity.getGuide_step();
        if (guide_step != null) {
            stmt.bindString(14, guide_step);
        }
 
        String push_info = entity.getPush_info();
        if (push_info != null) {
            stmt.bindString(15, push_info);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(16, description);
        }
 
        String last_device_id = entity.getLast_device_id();
        if (last_device_id != null) {
            stmt.bindString(17, last_device_id);
        }
 
        String org_version = entity.getOrg_version();
        if (org_version != null) {
            stmt.bindString(18, org_version);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(19, source);
        }
 
        String induction_nums = entity.getInduction_nums();
        if (induction_nums != null) {
            stmt.bindString(20, induction_nums);
        }
 
        String untreated_type = entity.getUntreated_type();
        if (untreated_type != null) {
            stmt.bindString(21, untreated_type);
        }
 
        Long position = entity.getPosition();
        if (position != null) {
            stmt.bindLong(22, position);
        }
 
        Integer boss_type = entity.getBoss_type();
        if (boss_type != null) {
            stmt.bindLong(23, boss_type);
        }
 
        Integer is_admin = entity.getIs_admin();
        if (is_admin != null) {
            stmt.bindLong(24, is_admin);
        }
 
        Integer is_leader = entity.getIs_leader();
        if (is_leader != null) {
            stmt.bindLong(25, is_leader);
        }
 
        Integer is_manager = entity.getIs_manager();
        if (is_manager != null) {
            stmt.bindLong(26, is_manager);
        }
 
        Integer dimission_step = entity.getDimission_step();
        if (dimission_step != null) {
            stmt.bindLong(27, dimission_step);
        }
 
        Integer is_delete = entity.getIs_delete();
        if (is_delete != null) {
            stmt.bindLong(28, is_delete);
        }
 
        Long update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindLong(29, update_time);
        }
 
        Long insert_time = entity.getInsert_time();
        if (insert_time != null) {
            stmt.bindLong(30, insert_time);
        }
 
        Long delete_time = entity.getDelete_time();
        if (delete_time != null) {
            stmt.bindLong(31, delete_time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBCompanyUserInfo entity) {
        stmt.clearBindings();
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(1, uid);
        }
 
        Long company_id = entity.getCompany_id();
        if (company_id != null) {
            stmt.bindLong(2, company_id);
        }
 
        Long account_uid = entity.getAccount_uid();
        if (account_uid != null) {
            stmt.bindLong(3, account_uid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String homeplace_province = entity.getHomeplace_province();
        if (homeplace_province != null) {
            stmt.bindString(5, homeplace_province);
        }
 
        String homeplace_city = entity.getHomeplace_city();
        if (homeplace_city != null) {
            stmt.bindString(6, homeplace_city);
        }
 
        String homeplace_county = entity.getHomeplace_county();
        if (homeplace_county != null) {
            stmt.bindString(7, homeplace_county);
        }
 
        Long salary = entity.getSalary();
        if (salary != null) {
            stmt.bindLong(8, salary);
        }
 
        String hire_date = entity.getHire_date();
        if (hire_date != null) {
            stmt.bindString(9, hire_date);
        }
 
        String fire_date = entity.getFire_date();
        if (fire_date != null) {
            stmt.bindString(10, fire_date);
        }
 
        String fire_reason = entity.getFire_reason();
        if (fire_reason != null) {
            stmt.bindString(11, fire_reason);
        }
 
        String probation_end_time = entity.getProbation_end_time();
        if (probation_end_time != null) {
            stmt.bindString(12, probation_end_time);
        }
 
        String max = entity.getMax();
        if (max != null) {
            stmt.bindString(13, max);
        }
 
        String guide_step = entity.getGuide_step();
        if (guide_step != null) {
            stmt.bindString(14, guide_step);
        }
 
        String push_info = entity.getPush_info();
        if (push_info != null) {
            stmt.bindString(15, push_info);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(16, description);
        }
 
        String last_device_id = entity.getLast_device_id();
        if (last_device_id != null) {
            stmt.bindString(17, last_device_id);
        }
 
        String org_version = entity.getOrg_version();
        if (org_version != null) {
            stmt.bindString(18, org_version);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(19, source);
        }
 
        String induction_nums = entity.getInduction_nums();
        if (induction_nums != null) {
            stmt.bindString(20, induction_nums);
        }
 
        String untreated_type = entity.getUntreated_type();
        if (untreated_type != null) {
            stmt.bindString(21, untreated_type);
        }
 
        Long position = entity.getPosition();
        if (position != null) {
            stmt.bindLong(22, position);
        }
 
        Integer boss_type = entity.getBoss_type();
        if (boss_type != null) {
            stmt.bindLong(23, boss_type);
        }
 
        Integer is_admin = entity.getIs_admin();
        if (is_admin != null) {
            stmt.bindLong(24, is_admin);
        }
 
        Integer is_leader = entity.getIs_leader();
        if (is_leader != null) {
            stmt.bindLong(25, is_leader);
        }
 
        Integer is_manager = entity.getIs_manager();
        if (is_manager != null) {
            stmt.bindLong(26, is_manager);
        }
 
        Integer dimission_step = entity.getDimission_step();
        if (dimission_step != null) {
            stmt.bindLong(27, dimission_step);
        }
 
        Integer is_delete = entity.getIs_delete();
        if (is_delete != null) {
            stmt.bindLong(28, is_delete);
        }
 
        Long update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindLong(29, update_time);
        }
 
        Long insert_time = entity.getInsert_time();
        if (insert_time != null) {
            stmt.bindLong(30, insert_time);
        }
 
        Long delete_time = entity.getDelete_time();
        if (delete_time != null) {
            stmt.bindLong(31, delete_time);
        }
    }

    @Override
    protected final void attachEntity(DBCompanyUserInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBCompanyUserInfo readEntity(Cursor cursor, int offset) {
        DBCompanyUserInfo entity = new DBCompanyUserInfo();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBCompanyUserInfo entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCompany_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setAccount_uid(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHomeplace_province(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHomeplace_city(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHomeplace_county(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSalary(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setHire_date(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFire_date(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFire_reason(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setProbation_end_time(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMax(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGuide_step(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPush_info(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDescription(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLast_device_id(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setOrg_version(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSource(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setInduction_nums(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setUntreated_type(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPosition(cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21));
        entity.setBoss_type(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setIs_admin(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setIs_leader(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setIs_manager(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setDimission_step(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setIs_delete(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setUpdate_time(cursor.isNull(offset + 28) ? null : cursor.getLong(offset + 28));
        entity.setInsert_time(cursor.isNull(offset + 29) ? null : cursor.getLong(offset + 29));
        entity.setDelete_time(cursor.isNull(offset + 30) ? null : cursor.getLong(offset + 30));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBCompanyUserInfo entity, long rowId) {
        entity.setUid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBCompanyUserInfo entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBCompanyUserInfo entity) {
        return entity.getUid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "companyUser" to-many relationship of DBUserInfo. */
    public List<DBCompanyUserInfo> _queryDBUserInfo_CompanyUser(Long account_uid) {
        synchronized (this) {
            if (dBUserInfo_CompanyUserQuery == null) {
                QueryBuilder<DBCompanyUserInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Account_uid.eq(null));
                dBUserInfo_CompanyUserQuery = queryBuilder.build();
            }
        }
        Query<DBCompanyUserInfo> query = dBUserInfo_CompanyUserQuery.forCurrentThread();
        query.setParameter(0, account_uid);
        return query.list();
    }

}
