package com.faucet.greendao.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.faucet.greendao.bean.DBCompanyUserEmailInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBCOMPANY_USER_EMAIL_INFO".
*/
public class DBCompanyUserEmailInfoDao extends AbstractDao<DBCompanyUserEmailInfo, Long> {

    public static final String TABLENAME = "DBCOMPANY_USER_EMAIL_INFO";

    /**
     * Properties of entity DBCompanyUserEmailInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Email = new Property(1, String.class, "email", false, "EMAIL");
        public final static Property Foreign_id = new Property(2, Long.class, "foreign_id", false, "FOREIGN_ID");
    }

    private Query<DBCompanyUserEmailInfo> dBCompanyUserInfo_Email_infoQuery;

    public DBCompanyUserEmailInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DBCompanyUserEmailInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBCOMPANY_USER_EMAIL_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EMAIL\" TEXT," + // 1: email
                "\"FOREIGN_ID\" INTEGER);"); // 2: foreign_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBCOMPANY_USER_EMAIL_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBCompanyUserEmailInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(2, email);
        }
 
        Long foreign_id = entity.getForeign_id();
        if (foreign_id != null) {
            stmt.bindLong(3, foreign_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBCompanyUserEmailInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(2, email);
        }
 
        Long foreign_id = entity.getForeign_id();
        if (foreign_id != null) {
            stmt.bindLong(3, foreign_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBCompanyUserEmailInfo readEntity(Cursor cursor, int offset) {
        DBCompanyUserEmailInfo entity = new DBCompanyUserEmailInfo();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBCompanyUserEmailInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEmail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setForeign_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBCompanyUserEmailInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBCompanyUserEmailInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBCompanyUserEmailInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "email_info" to-many relationship of DBCompanyUserInfo. */
    public List<DBCompanyUserEmailInfo> _queryDBCompanyUserInfo_Email_info(Long foreign_id) {
        synchronized (this) {
            if (dBCompanyUserInfo_Email_infoQuery == null) {
                QueryBuilder<DBCompanyUserEmailInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Foreign_id.eq(null));
                dBCompanyUserInfo_Email_infoQuery = queryBuilder.build();
            }
        }
        Query<DBCompanyUserEmailInfo> query = dBCompanyUserInfo_Email_infoQuery.forCurrentThread();
        query.setParameter(0, foreign_id);
        return query.list();
    }

}
