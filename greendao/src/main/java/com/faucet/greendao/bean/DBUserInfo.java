package com.faucet.greendao.bean;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.faucet.greendao.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.faucet.greendao.dao.DBCompanyUserInfoDao;
import com.faucet.greendao.dao.DBUserInfoDao;
import com.faucet.greendao.dao.DBValidationMessageDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "DBUSER_INFO".
 */
@Entity(active = true)
public class DBUserInfo implements java.io.Serializable {

    @Id
    private Long account_uid;
    private Long fid;
    private Long qyt_account;

    @Index
    private String username;
    private String avatar;
    private Integer sex;
    private String birthday;
    private String education;
    private String work_date;
    private String emergency_contact_person;
    private String emergency_contact_mobile;
    private Integer is_marry;
    private Integer children_num;

    @Index
    private String first_letter;

    @Index
    private String header_letters;

    @Index
    private String pinyin;

    @Index
    private String realname;

    @Index
    private String real_first_letter;

    @Index
    private String real_header_letters;

    @Index
    private String real_pinyin;
    private Integer blood_type;
    private Integer is_show;
    private Long action_time;
    private Integer relate_type;
    private Long re_id;
    private Long user_id;
    private Integer is_delete;
    private Integer is_me;
    private Long friend_account_uid;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient DBUserInfoDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "account_uid", referencedName = "foreign_id")
    })
    private List<DBValidationMessage> message;

    @ToMany(joinProperties = {
        @JoinProperty(name = "account_uid", referencedName = "account_uid")
    })
    private List<DBCompanyUserInfo> companyUser;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END


    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBUserInfoDao() : null;
    }

    public Long getAccount_uid() {
        return account_uid;
    }

    public void setAccount_uid(Long account_uid) {
        this.account_uid = account_uid;
    }

    public Long getFid() {
        return fid;
    }

    public void setFid(Long fid) {
        this.fid = fid;
    }

    public Long getQyt_account() {
        return qyt_account;
    }

    public void setQyt_account(Long qyt_account) {
        this.qyt_account = qyt_account;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getAvatar() {
        return avatar;
    }

    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }

    public Integer getSex() {
        return sex;
    }

    public void setSex(Integer sex) {
        this.sex = sex;
    }

    public String getBirthday() {
        return birthday;
    }

    public void setBirthday(String birthday) {
        this.birthday = birthday;
    }

    public String getEducation() {
        return education;
    }

    public void setEducation(String education) {
        this.education = education;
    }

    public String getWork_date() {
        return work_date;
    }

    public void setWork_date(String work_date) {
        this.work_date = work_date;
    }

    public String getEmergency_contact_person() {
        return emergency_contact_person;
    }

    public void setEmergency_contact_person(String emergency_contact_person) {
        this.emergency_contact_person = emergency_contact_person;
    }

    public String getEmergency_contact_mobile() {
        return emergency_contact_mobile;
    }

    public void setEmergency_contact_mobile(String emergency_contact_mobile) {
        this.emergency_contact_mobile = emergency_contact_mobile;
    }

    public Integer getIs_marry() {
        return is_marry;
    }

    public void setIs_marry(Integer is_marry) {
        this.is_marry = is_marry;
    }

    public Integer getChildren_num() {
        return children_num;
    }

    public void setChildren_num(Integer children_num) {
        this.children_num = children_num;
    }

    public String getFirst_letter() {
        return first_letter;
    }

    public void setFirst_letter(String first_letter) {
        this.first_letter = first_letter;
    }

    public String getHeader_letters() {
        return header_letters;
    }

    public void setHeader_letters(String header_letters) {
        this.header_letters = header_letters;
    }

    public String getPinyin() {
        return pinyin;
    }

    public void setPinyin(String pinyin) {
        this.pinyin = pinyin;
    }

    public String getRealname() {
        return realname;
    }

    public void setRealname(String realname) {
        this.realname = realname;
    }

    public String getReal_first_letter() {
        return real_first_letter;
    }

    public void setReal_first_letter(String real_first_letter) {
        this.real_first_letter = real_first_letter;
    }

    public String getReal_header_letters() {
        return real_header_letters;
    }

    public void setReal_header_letters(String real_header_letters) {
        this.real_header_letters = real_header_letters;
    }

    public String getReal_pinyin() {
        return real_pinyin;
    }

    public void setReal_pinyin(String real_pinyin) {
        this.real_pinyin = real_pinyin;
    }

    public Integer getBlood_type() {
        return blood_type;
    }

    public void setBlood_type(Integer blood_type) {
        this.blood_type = blood_type;
    }

    public Integer getIs_show() {
        return is_show;
    }

    public void setIs_show(Integer is_show) {
        this.is_show = is_show;
    }

    public Long getAction_time() {
        return action_time;
    }

    public void setAction_time(Long action_time) {
        this.action_time = action_time;
    }

    public Integer getRelate_type() {
        return relate_type;
    }

    public void setRelate_type(Integer relate_type) {
        this.relate_type = relate_type;
    }

    public Long getRe_id() {
        return re_id;
    }

    public void setRe_id(Long re_id) {
        this.re_id = re_id;
    }

    public Long getUser_id() {
        return user_id;
    }

    public void setUser_id(Long user_id) {
        this.user_id = user_id;
    }

    public Integer getIs_delete() {
        return is_delete;
    }

    public void setIs_delete(Integer is_delete) {
        this.is_delete = is_delete;
    }

    public Integer getIs_me() {
        return is_me;
    }

    public void setIs_me(Integer is_me) {
        this.is_me = is_me;
    }

    public Long getFriend_account_uid() {
        return friend_account_uid;
    }

    public void setFriend_account_uid(Long friend_account_uid) {
        this.friend_account_uid = friend_account_uid;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<DBValidationMessage> getMessage() {
        if (message == null) {
            __throwIfDetached();
            DBValidationMessageDao targetDao = daoSession.getDBValidationMessageDao();
            List<DBValidationMessage> messageNew = targetDao._queryDBUserInfo_Message(account_uid);
            synchronized (this) {
                if(message == null) {
                    message = messageNew;
                }
            }
        }
        return message;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetMessage() {
        message = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<DBCompanyUserInfo> getCompanyUser() {
        if (companyUser == null) {
            __throwIfDetached();
            DBCompanyUserInfoDao targetDao = daoSession.getDBCompanyUserInfoDao();
            List<DBCompanyUserInfo> companyUserNew = targetDao._queryDBUserInfo_CompanyUser(account_uid);
            synchronized (this) {
                if(companyUser == null) {
                    companyUser = companyUserNew;
                }
            }
        }
        return companyUser;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetCompanyUser() {
        companyUser = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
